int	has_left_fork(t_philosopher *philosopher)
{
	return (philosopher->holding_left_fork);
}

int	has_right_fork(t_philosopher *philosopher)
{
	return (philosopher->holding_right_fork);
}

	// if (is_dead(philosopher))
	// 	return ("died                 ☠️");
	// if (is_eating(philosopher))
	// 	return ("is eating          🍴😋🍴");
	// if (has_left_fork(philosopher))
	// 	return ("has taken a fork   🍴😬");
	// if (has_right_fork(philosopher))
	// 	return ("has taken a fork     😬🍴");
	// if (is_thinking(philosopher))
	// 	return ("is thinking          🤔");
	// if (is_sleeping(philosopher))
	// 	return ("is sleeping          😴");
	// else
	// 	return ("UNKNOWN");

// 4 3000 200 300 8
// cc main.c -Wall -Wextra -Werror && ./a.out 5 410 200 200 8

// Works!
// cc main.c -Wall -Wextra -Werror && ./a.out 5 500 200 300 10

// Die
// cc main.c -Wall -Wextra -Werror && ./a.out 5 410 200 200 8

void	*display_log(void *arg)
{
	t_philosopher	**philosophers;
	int				timestamp;
	int				i;
	int				nobody_died;

	philosophers = (t_philosopher **)arg;
	nobody_died = TRUE;
	while (nobody_died)
	{
		i = 0;
		printf("\e[1;1H\e[2J");
		printf("               🍝 Dinner time! 🍝 \v\r");
		printf("------------------------------------------------- \v\r");
		while (philosophers[i])
		{
			timestamp = get_timestamp();
			printf("%d %d %s\v\r", timestamp, philosophers[i]->id,
					readable_state(philosophers[i]));
			if (is_dead(philosophers[i]))
				nobody_died = FALSE;
			i++;
		}
		fflush(stdout);
		usleep(1000 * 10);
	}
	return (NULL);
}


#include <string.h>   // strdup ## TODO: remove

void	name_philosopher(t_philosopher *philosopher, int i)
{
	const char	*names[21];

	philosopher->id = i;
	names[0] = "Plato";
	names[1] = "Aristotle";
	names[2] = "Pythagoras";
	names[3] = "Heraclitus";
	names[4] = "Parmenides";
	names[5] = "Democritus";
	names[6] = "Zeno of Elea";
	names[7] = "Epicurus";
	names[8] = "Anaxagoras";
	names[9] = "Diogenes";
	names[10] = "Antisthenes";
	names[11] = "Gorgias";
	names[12] = "Hippocrates";
	names[13] = "Plutarch";
	names[14] = "Proclus";
	names[15] = "Chrysippus";
	names[16] = "Solon";
	names[17] = "Archimedes";
	names[18] = "Thucydides";
	names[19] = "Arcesilaus";
	names[20] = "Posidonius";
	philosopher->name = strdup(names[i % 21]);
}

// char			*name;
// After init_philosopher
// name_philosopher(philosophers[i], i);

